generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Users          User[]
  Tickets        Ticket[]
  Equipaments    Equipaments[]
  Locations      Locations[]
  Services       Service[]
  Contracts      Contract[]
  TicketType     TicketType[]
  TicketPriority TicketPriority[]
  TicketCategory TicketCategory[]
  TicketResponse TicketResponse[]
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  name         String
  email        String    @unique
  password     String
  phone        String
  ramal        String
  sector       String
  isTechnician Boolean   @default(false)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now())

  Ticket           Ticket[]
  RefreshTokens    RefreshToken[]
  Equipaments      Equipaments[]
  TicketResponse   TicketResponse[]
  Company          Company            @relation(fields: [companyId], references: [id])
  companyId        String
  TicketEvaluation TicketEvaluation[]
}

model Ticket {
  id             String    @id @default(uuid())
  description    String
  ticketType     String
  ticketCategory String
  ticketPriority String
  ticketLocation String
  assignedTo     String[]
  equipaments    String[]
  images         String[]
  assignedToAt   DateTime?
  closedBy       String?
  closedAt       DateTime?
  status         String?
  timeEstimate   DateTime?
  isDelay        Boolean?  @default(false)
  userId         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  ticketTypeId     TicketType         @relation(fields: [ticketType], references: [id])
  ticketCategoryId TicketCategory     @relation(fields: [ticketCategory], references: [id])
  ticketPriorityId TicketPriority     @relation(fields: [ticketPriority], references: [id])
  ticketLocationId Locations          @relation(fields: [ticketLocation], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  TicketResponse   TicketResponse[]
  Company          Company            @relation(fields: [companyId], references: [id])
  companyId        String
  TicketEvaluation TicketEvaluation[]
}

model Equipaments {
  id           String @id @default(uuid())
  name         String
  model        String
  serialNumber String
  patrimonyTag String
  type         String

  userId      String
  equipaments User    @relation(fields: [userId], references: [id])
  Company     Company @relation(fields: [companyId], references: [id])
  companyId   String
}

model Locations {
  id        String   @id @default(uuid())
  name      String
  Ticket    Ticket[]
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model TicketType {
  id        String   @id @default(uuid())
  name      String
  Ticket    Ticket[]
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model TicketPriority {
  id        String   @id @default(uuid())
  name      String
  Ticket    Ticket[]
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model TicketCategory {
  id           String   @id @default(uuid())
  name         String
  childrenName String
  defaultText  String?
  Ticket       Ticket[]
  Company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
}

model Maintenance {
  id                     String    @id @default(uuid())
  name                   String
  location               String
  serialNumber           String
  patrimony              String
  model                  String
  preventiveCount        Int?
  correctiveCount        Int?
  nextDatePreventive     DateTime?
  previousDatePreventive DateTime?
  description            String?
  createdAt              DateTime  @default(now())
  maintenanceListTodoo   Json?

  HistoryMaintenance HistoryMaintenance[]
}

model HistoryMaintenance {
  id                   String   @id @default(uuid())
  maintenanceListTodoo Json?
  createdAt            DateTime @default(now())

  maintenanceId String
  historyId     Maintenance @relation(fields: [maintenanceId], references: [id])
}

model TicketResponse {
  id        String   @id @default(uuid())
  content   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  User      User     @relation(fields: [userId], references: [id])
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model MachineInfo {
  id        String   @id @default(uuid())
  hostname  String
  platform  String
  release   String
  cpu       String
  memory    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NetworkConnections NetworkConnection[]
  UserInfos          UserInfo[]
}

model NetworkConnection {
  id           String   @id @default(uuid())
  protocol     String
  localAddress String
  localPort    String
  peerAddress  String
  peerPort     String
  state        String
  pid          Int
  process      String
  createdAt    DateTime @default(now())

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
}

model UserInfo {
  id        String   @id @default(uuid())
  user      String
  tty       String
  date      DateTime
  time      String
  ip        String?
  command   String
  createdAt DateTime @default(now())

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Provider {
  id        String     @id @default(uuid())
  name      String
  phone     String
  email     String     @unique
  address   String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now())
  Contract  Contract[]
  Service   Service[]
}

model Contract {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  file       String // Para armazenar o link para o contrato (PDF, imagem, etc.)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  Company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
}

model Service {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  price      Float
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  Company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
}

model TicketEvaluation {
  id        String    @id @default(uuid())
  rating    Int       @default(0) @db.Integer
  comments  String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userId   String
  ticketId String
  User     User   @relation(fields: [userId], references: [id])
  Ticket   Ticket @relation(fields: [ticketId], references: [id])
}
