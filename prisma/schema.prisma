generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  email     String    @unique
  password  String
  phone     String
  ramal     String
  sector    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  Ticket        Ticket[]
  RefreshTokens RefreshToken[]
  Equipaments   Equipaments[]
}

model Ticket {
  id             String    @id @default(uuid())
  description    String
  ticketType     String
  ticketCategory String
  ticketPriority String
  ticketLocation String
  assignedTo     String[]
  equipaments    String[]
  images         String[]
  assignedToAt   DateTime?
  closedBy       String?
  closedAt       DateTime?
  status         String?
  timeEstimate   DateTime?
  isDelay        Boolean?  @default(false)
  userId         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  ticketTypeId     TicketType     @relation(fields: [ticketType], references: [id])
  ticketCategoryId TicketCategory @relation(fields: [ticketCategory], references: [id])
  ticketPriorityId TicketPriority @relation(fields: [ticketPriority], references: [id])
  ticketLocationId Locations      @relation(fields: [ticketLocation], references: [id])
  User             User?          @relation(fields: [userId], references: [id])
}

model Equipaments {
  id           String @id @default(uuid())
  name         String
  model        String
  serialNumber String
  patrimonyTag String

  userId      String
  equipaments User   @relation(fields: [userId], references: [id])
}

model Locations {
  id     String   @id @default(uuid())
  name   String
  Ticket Ticket[]
}

model TicketType {
  id     String   @id @default(uuid())
  name   String
  Ticket Ticket[]
}

model TicketPriority {
  id     String   @id @default(uuid())
  name   String
  Ticket Ticket[]
}

model TicketCategory {
  id           String   @id @default(uuid())
  name         String
  childrenName String
  defaultText  String?
  Ticket       Ticket[]
}

model Maintenance {
  id                     String    @id @default(uuid())
  name                   String
  location               String
  serialNumber           String
  patrimony              String
  model                  String
  preventiveCount        Int?
  correctiveCount        Int?
  nextDatePreventive     DateTime?
  previousDatePreventive DateTime?
  description            String?
  createdAt              DateTime  @default(now())
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
