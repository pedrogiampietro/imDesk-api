generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  UserCompanies         UserCompany[]
  Tickets               TicketCompany[]
  Equipments            EquipmentCompany[]
  Locations             LocationCompany[]
  Services              Service[]
  Contracts             Contract[]
  TicketTypes TicketTypeCompany[]
  TicketCategories TicketCategoryCompany[]
  TicketPriorityCompany TicketPriorityCompany[]
}

model UserCompany {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  name         String
  email        String    @unique
  password     String
  phone        String
  ramal        String
  sector       String
  currentLoggedCompanyId String?
  currentLoggedCompanyName String?
  isTechnician Boolean   @default(false)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now())

  Ticket           Ticket[]
  RefreshTokens    RefreshToken[]
  Equipments       EquipmentCompany[]
  TicketResponse   TicketResponse[]
  TicketEvaluation TicketEvaluation[]
  UserCompanies    UserCompany[]
}

model Ticket {
  id               String    @id @default(uuid())
  description      String
  ticketTypeId     String
  ticketCategoryId String
  ticketPriorityId String
  ticketLocationId String
  assignedTo       String[]
  equipaments      String[]
  images           String[]
  assignedToAt     DateTime?
  closedBy         String?
  closedAt         DateTime?
  status           String?
  timeEstimate     DateTime?
  isDelay          Boolean?  @default(false)
  userId           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  ticketType       TicketType         @relation(fields: [ticketTypeId], references: [id])
  ticketCategory   TicketCategory     @relation(fields: [ticketCategoryId], references: [id])
  ticketPriority   TicketPriority     @relation(fields: [ticketPriorityId], references: [id])
  ticketLocation   Locations          @relation(fields: [ticketLocationId], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  TicketResponse   TicketResponse[]
  TicketEvaluation TicketEvaluation[]
  TicketCompanies  TicketCompany[]
}

model Equipments {
  id           String @id @default(uuid())
  name         String
  model        String
  serialNumber String
  patrimonyTag String
  type         String

  EquipmentCompanies EquipmentCompany[]
}

model Locations {
  id   String @id @default(uuid())
  name String

  LocationCompanies LocationCompany[]
  Ticket            Ticket[]
}

model TicketCompany {
  ticketId  String
  ticket    Ticket  @relation(fields: [ticketId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  @@id([ticketId, companyId])
}

model EquipmentCompany {
  equipmentId String
  equipment   Equipments @relation(fields: [equipmentId], references: [id])
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?

  @@id([equipmentId, companyId])
}

model LocationCompany {
  locationId String
  location   Locations @relation(fields: [locationId], references: [id])
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id])

  @@id([locationId, companyId])
}

model TicketType {
  id               String            @id @default(uuid())
  name             String
  Ticket           Ticket[]
  TicketTypeCompanies TicketTypeCompany[]
}

model TicketTypeCompany {
  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  companyId    String
  company      Company @relation(fields: [companyId], references: [id])
  
  @@id([ticketTypeId, companyId])
}

model TicketPriority {
  id     String   @id @default(uuid())
  name   String
  Ticket Ticket[]

  TicketPriorityCompanies TicketPriorityCompany[]

}

model TicketPriorityCompany {
  ticketPriorityId String
  ticketPriority   TicketPriority @relation(fields: [ticketPriorityId], references: [id])
  companyId        String
  company          Company        @relation(fields: [companyId], references: [id])

  @@id([ticketPriorityId, companyId])
}

model TicketCategory {
  id               String                 @id @default(uuid())
  name             String
  childrenName     String
  defaultText      String?
  Ticket           Ticket[]
  TicketCategoryCompanies TicketCategoryCompany[]
}

model TicketCategoryCompany {
  ticketCategoryId String
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  companyId        String
  company          Company @relation(fields: [companyId], references: [id])
  
  @@id([ticketCategoryId, companyId])
}

model Maintenance {
  id                     String    @id @default(uuid())
  name                   String
  location               String
  serialNumber           String
  patrimony              String
  model                  String
  preventiveCount        Int?
  correctiveCount        Int?
  nextDatePreventive     DateTime?
  previousDatePreventive DateTime?
  description            String?
  createdAt              DateTime  @default(now())
  maintenanceListTodoo   Json?

  HistoryMaintenance HistoryMaintenance[]
}

model HistoryMaintenance {
  id                   String   @id @default(uuid())
  maintenanceListTodoo Json?
  createdAt            DateTime @default(now())

  maintenanceId String
  historyId     Maintenance @relation(fields: [maintenanceId], references: [id])
}

model TicketResponse {
  id        String   @id @default(uuid())
  content   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  User      User     @relation(fields: [userId], references: [id])
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model MachineInfo {
  id        String   @id @default(uuid())
  hostname  String
  platform  String
  release   String
  cpu       String
  memory    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NetworkConnections NetworkConnection[]
  UserInfos          UserInfo[]
}

model NetworkConnection {
  id           String   @id @default(uuid())
  protocol     String
  localAddress String
  localPort    String
  peerAddress  String
  peerPort     String
  state        String
  pid          Int
  process      String
  createdAt    DateTime @default(now())

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
}

model UserInfo {
  id        String   @id @default(uuid())
  user      String
  tty       String
  date      DateTime
  time      String
  ip        String?
  command   String
  createdAt DateTime @default(now())

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Provider {
  id        String     @id @default(uuid())
  name      String
  phone     String
  email     String     @unique
  address   String
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now())
  Contract  Contract[]
  Service   Service[]
}

model Contract {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  file       String // Para armazenar o link para o contrato (PDF, imagem, etc.)
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  Company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Service {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  price      Float
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())

  Company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model TicketEvaluation {
  id        String    @id @default(uuid())
  rating    Int       @default(0) @db.Integer
  comments  String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userId   String
  ticketId String
  User     User   @relation(fields: [userId], references: [id])
  Ticket   Ticket @relation(fields: [ticketId], references: [id])
}
