generator client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String @id @default(uuid())
  name      String
  subdomain String @unique

  users                      User[]
  tickets                    Ticket[]
  equipments                 Equipments[]
  companies                  Company[]
  locations                  Locations[]
  service                    Service[]
  contracts                  Contract[]
  images                     Image[]
  ticketTypes                TicketType[]
  ticketPrioritys            TicketPriority[]
  ticketCategorys            TicketCategory[]
  maintenances               Maintenance[]
  historyMaintenances        HistoryMaintenance[]
  ticketResponses            TicketResponse[]
  ticketResponseImages       TicketResponseImage[]
  diskInfos                  DiskInfo[]
  installedApps              InstalledApp[]
  machineInfos               MachineInfo[]
  refreshTokens              RefreshToken[]
  providers                  Provider[]
  ticketEvaluations          TicketEvaluation[]
  SLAViolations              SLAViolation[]
  SLADefinitions             SLADefinition[]
  notifications              Notification[]
  depots                     Depot[]
  depotItems                 DepotItem[]
  ticketItems                TicketItem[]
  todos                      Todo[]
  groups                     Group[]
  groupCompanys              GroupCompany[]
  equipmentTypes             EquipmentType[]
  equipmentTypeCompanys      EquipmentTypeCompany[]
  logs                       Log[]
  emailQueues                EmailQueue[]
  shiftChangeTickets         ShiftChangeTicket[]
  shiftChanges               ShiftChange[]
  shiftChangeCompanys        ShiftChangeCompany[]
  shiftChangeAssignedTickets ShiftChangeAssignedTicket[]
  shiftChangePlannedTickets  ShiftChangePlannedTicket[]
  shiftChangePendingTickets  ShiftChangePendingTicket[]
  suggestionComplaints       SuggestionComplaint[]
}

model Company {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  UserCompanies         UserCompany[]
  Tickets               TicketCompany[]
  Equipments            EquipmentCompany[]
  Locations             LocationCompany[]
  Services              Service[]
  Contracts             Contract[]
  TicketTypes           TicketTypeCompany[]
  TicketCategories      TicketCategoryCompany[]
  TicketPriorityCompany TicketPriorityCompany[]
  Depots                Depot[]
  GroupCompanies        GroupCompany[]
  EquipmentTypes        EquipmentTypeCompany[]
  ShiftChangeCompany    ShiftChangeCompany[]
  SuggestionComplaint   SuggestionComplaint[]
  Tenant                Tenant?                 @relation(fields: [tenantId], references: [id])
  tenantId              String?
}

model UserCompany {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id                       String    @id @default(uuid())
  username                 String    @unique
  name                     String
  email                    String    @unique
  password                 String
  phone                    String
  ramal                    String
  sector                   String
  currentLoggedCompanyId   String?
  currentLoggedCompanyName String?
  isTechnician             Boolean   @default(false)
  createdAt                DateTime? @default(now())
  updatedAt                DateTime? @default(now())
  avatarUrl                String?
  hourlyRate               Float?
  groupId                  Int?
  signatureUrl             String?
  isOnline                 Boolean   @default(false)

  Ticket              Ticket[]
  RefreshTokens       RefreshToken[]
  Equipments          EquipmentCompany[]
  TicketResponse      TicketResponse[]
  TicketEvaluation    TicketEvaluation[]
  UserCompanies       UserCompany[]
  Notification        Notification[]
  DepotUsers          DepotUser[]
  Log                 Log[]
  Groups              Group?                @relation(fields: [groupId], references: [id])
  ShiftChange         ShiftChange[]
  SuggestionComplaint SuggestionComplaint[]
  Tenant              Tenant?               @relation(fields: [tenantId], references: [id])
  tenantId            String?
}

model DepotUser {
  depotId String
  Depot   Depot  @relation(fields: [depotId], references: [id])
  userId  String
  User    User   @relation(fields: [userId], references: [id])

  @@id([depotId, userId])
}

model Ticket {
  id                         String     @id @default(uuid())
  description                String
  observationServiceExecuted String?
  ticketWasSignedTech        Boolean?   @default(false)
  ticketWasSignedUser        Boolean?   @default(false)
  ticketTypeId               String
  ticketCategoryId           String
  ticketPriorityId           String
  ticketLocationId           String
  assignedTo                 String[]
  assignedToAt               DateTime[]
  assignedSignature          String?
  closedBy                   String?
  closedAt                   DateTime?
  status                     String?
  timeEstimate               DateTime?
  isDelay                    Boolean?   @default(false)
  userId                     String?
  manualResolutionDueDate    DateTime?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @default(now())
  slaDefinitionId            Int?
  groupId                    Int?
  dateToStart                DateTime?

  ticketType       TicketType         @relation(fields: [ticketTypeId], references: [id])
  ticketCategory   TicketCategory     @relation(fields: [ticketCategoryId], references: [id])
  ticketPriority   TicketPriority     @relation(fields: [ticketPriorityId], references: [id])
  ticketLocation   Locations          @relation(fields: [ticketLocationId], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  TicketResponse   TicketResponse[]
  TicketEvaluation TicketEvaluation[]
  TicketCompanies  TicketCompany[]
  SLAViolation     SLAViolation[]
  SLADefinition    SLADefinition?     @relation(fields: [slaDefinitionId], references: [id])
  Notification     Notification[]
  images           Image[]
  usedItems        TicketItem[]
  Todos            Todo[]
  Groups           Group?             @relation(fields: [groupId], references: [id])
  Equipments       TicketEquipments[]

  AssignedShiftChanges ShiftChangeAssignedTicket[]
  PlannedShiftChanges  ShiftChangePlannedTicket[]
  PendingShiftChanges  ShiftChangePendingTicket[]
  ShiftChangeTicket    ShiftChangeTicket[]
  Tenant               Tenant?                     @relation(fields: [tenantId], references: [id])
  tenantId             String?
}

model TicketEquipments {
  ticketId    String
  ticket      Ticket     @relation(fields: [ticketId], references: [id])
  equipmentId String
  equipment   Equipments @relation(fields: [equipmentId], references: [id])

  @@id([ticketId, equipmentId])
}

model Equipments {
  id           String   @id @default(uuid())
  name         String
  model        String
  patrimonyTag String   @unique
  serialNumber String   @unique
  type         String
  locationId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  EquipmentCompanies EquipmentCompany[]
  Tickets            TicketEquipments[]
  Location           Locations          @relation(fields: [locationId], references: [id])
  Tenant             Tenant?            @relation(fields: [tenantId], references: [id])
  tenantId           String?
}

model EquipmentCompany {
  equipmentId String
  equipment   Equipments @relation(fields: [equipmentId], references: [id])
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  groupId     Int?
  group       Group?     @relation(fields: [groupId], references: [id])
  userId      String?
  User        User?      @relation(fields: [userId], references: [id])

  @@id([equipmentId, companyId])
}

model Image {
  id       Int     @id @default(autoincrement())
  path     String
  ticketId String
  ticket   Ticket  @relation(fields: [ticketId], references: [id])
  Tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?
}

model Locations {
  id           String   @id @default(uuid())
  name         String
  childrenName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  LocationCompanies LocationCompany[]
  Ticket            Ticket[]
  Equipments        Equipments[]
  Tenant            Tenant?           @relation(fields: [tenantId], references: [id])
  tenantId          String?
}

model LocationCompany {
  locationId String
  location   Locations @relation(fields: [locationId], references: [id])
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id])

  @@id([locationId, companyId])
}

model TicketCompany {
  ticketId  String
  ticket    Ticket  @relation(fields: [ticketId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  @@id([ticketId, companyId])
}

model TicketType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Ticket              Ticket[]
  TicketTypeCompanies TicketTypeCompany[]
  Tenant              Tenant?             @relation(fields: [tenantId], references: [id])
  tenantId            String?
}

model TicketTypeCompany {
  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])

  @@id([ticketTypeId, companyId])
}

model TicketPriority {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Ticket Ticket[]

  TicketPriorityCompanies TicketPriorityCompany[]
  Tenant                  Tenant?                 @relation(fields: [tenantId], references: [id])
  tenantId                String?
}

model TicketPriorityCompany {
  ticketPriorityId String
  ticketPriority   TicketPriority @relation(fields: [ticketPriorityId], references: [id])
  companyId        String
  company          Company        @relation(fields: [companyId], references: [id])

  @@id([ticketPriorityId, companyId])
}

model TicketCategory {
  id           String   @id @default(uuid())
  name         String
  childrenName String
  defaultText  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  Ticket                  Ticket[]
  TicketCategoryCompanies TicketCategoryCompany[]
  Tenant                  Tenant?                 @relation(fields: [tenantId], references: [id])
  tenantId                String?
}

model TicketCategoryCompany {
  ticketCategoryId String
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  companyId        String
  company          Company        @relation(fields: [companyId], references: [id])

  @@id([ticketCategoryId, companyId])
}

model Maintenance {
  id                     String    @id @default(uuid())
  name                   String
  location               String
  serialNumber           String
  patrimony              String
  model                  String
  preventiveCount        Int?
  correctiveCount        Int?
  nextDatePreventive     DateTime?
  previousDatePreventive DateTime?
  description            String?
  createdAt              DateTime  @default(now())
  maintenanceListTodoo   Json?

  HistoryMaintenance HistoryMaintenance[]
  Tenant             Tenant?              @relation(fields: [tenantId], references: [id])
  tenantId           String?
}

model HistoryMaintenance {
  id                   String   @id @default(uuid())
  maintenanceListTodoo Json?
  createdAt            DateTime @default(now())

  maintenanceId String
  historyId     Maintenance @relation(fields: [maintenanceId], references: [id])
  Tenant        Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId      String?
}

model TicketResponse {
  id        String   @id @default(uuid())
  content   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String

  ticketImages TicketResponseImage[]
  User         User                  @relation(fields: [userId], references: [id])
  Ticket       Ticket                @relation(fields: [ticketId], references: [id])
  Tenant       Tenant?               @relation(fields: [tenantId], references: [id])
  tenantId     String?
}

model TicketResponseImage {
  id               String         @id @default(uuid())
  path             String // Stores the path to the image on the server or cloud
  ticketResponseId String // Foreign key to TicketResponse
  TicketResponse   TicketResponse @relation(fields: [ticketResponseId], references: [id])
  Tenant           Tenant?        @relation(fields: [tenantId], references: [id])
  tenantId         String?
}

model DiskInfo {
  id        String   @id @default(uuid())
  device    String
  size      BigInt
  used      BigInt
  available BigInt
  capacity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
  Tenant        Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId      String?
}

model InstalledApp {
  id              String   @id @default(uuid())
  displayName     String
  displayIcon     String?
  displayVersion  String?
  installLocation String?
  publisher       String?
  uninstallString String?
  otherDetails    Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
  Tenant        Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId      String?
}

model MachineInfo {
  id          String   @id @default(uuid())
  hostname    String
  platform    String
  release     String
  cpu         String
  memoryTotal String
  memoryFree  String
  userInfo    String
  macAddress  String
  ipAddress   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Disks         DiskInfo[]
  InstalledApps InstalledApp[]
  Tenant        Tenant?        @relation(fields: [tenantId], references: [id])
  tenantId      String?
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId    String?
}

model Provider {
  id              String     @id @default(uuid())
  name            String
  phone           String
  email           String     @unique
  address         String
  status          Boolean    @default(true)
  logoURL         String?
  description     String?
  category        String?
  serviceProvided String?
  monthlyValue    Float?
  dueDate         DateTime?
  operationDate   DateTime?
  contractNumber  String?
  adendum         String?
  createdAt       DateTime?  @default(now())
  updatedAt       DateTime?  @default(now())
  Contract        Contract[]
  Service         Service[]
  Tenant          Tenant?    @relation(fields: [tenantId], references: [id])
  tenantId        String?
}

model Contract {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  file       String
  endDate    DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  Company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
  Tenant     Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId   String?
}

model Service {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  price      Float
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  Company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
  Tenant     Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId   String?
}

model TicketEvaluation {
  id        String    @id @default(uuid())
  rating    Int       @default(0) @db.Integer
  comments  String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userId   String
  ticketId String
  User     User    @relation(fields: [userId], references: [id])
  Ticket   Ticket  @relation(fields: [ticketId], references: [id])
  Tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?
}

model SLAViolation {
  id        String   @id @default(uuid())
  reason    String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
  Tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model SLADefinition {
  id             Int      @id @default(autoincrement())
  ticketPriority String
  resolutionTime Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Tickets        Ticket[]
  Tenant         Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId       String?
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  type      String
  isRead    Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id])
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
  Tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model Depot {
  id         String      @id @default(uuid())
  name       String
  location   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  companyId  String
  Company    Company     @relation(fields: [companyId], references: [id])
  DepotItems DepotItem[]
  DepotUsers DepotUser[]
  Tenant     Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId   String?
}

model DepotItem {
  id            String       @id @default(uuid())
  name          String
  category      String?
  quantity      Int
  cost          Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  depotId       String
  Depot         Depot        @relation(fields: [depotId], references: [id])
  usedInTickets TicketItem[]
  Tenant        Tenant?      @relation(fields: [tenantId], references: [id])
  tenantId      String?
}

model TicketItem {
  id          String    @id @default(uuid())
  ticketId    String
  Ticket      Ticket    @relation(fields: [ticketId], references: [id])
  depotItemId String
  DepotItem   DepotItem @relation(fields: [depotItemId], references: [id])
  quantity    Int
  cost        Int?
  Tenant      Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId    String?
}

model Todo {
  id          String  @id @default(uuid())
  description String
  completed   Boolean @default(false)
  ticketId    String

  Ticket   Ticket  @relation(fields: [ticketId], references: [id])
  Tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  users   User[]
  tickets Ticket[]

  GroupCompanies   GroupCompany[]
  EquipmentCompany EquipmentCompany[]
  Tenant           Tenant?            @relation(fields: [tenantId], references: [id])
  tenantId         String?
}

model GroupCompany {
  groupId   Int
  group     Group   @relation(fields: [groupId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  Tenant    Tenant? @relation(fields: [tenantId], references: [id])
  tenantId  String?

  @@id([groupId, companyId])
}

model EquipmentType {
  id        String                 @id @default(uuid())
  name      String                 @unique
  companies EquipmentTypeCompany[]
  Tenant    Tenant?                @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model EquipmentTypeCompany {
  id              String   @unique @default(uuid())
  equipmentTypeId String
  companyId       String
  createdAt       DateTime @default(now())

  equipmentType EquipmentType @relation(fields: [equipmentTypeId], references: [id])
  company       Company       @relation(fields: [companyId], references: [id])
  Tenant        Tenant?       @relation(fields: [tenantId], references: [id])
  tenantId      String?

  @@id([equipmentTypeId, companyId])
}

model Log {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String
  createdAt DateTime @default(now())
  Tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model EmailQueue {
  id        Int      @id @default(autoincrement())
  to        String
  subject   String
  text      String
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model ShiftChangeTicket {
  shiftChangeId String
  ticketId      String

  ShiftChange ShiftChange @relation(fields: [shiftChangeId], references: [id])
  Ticket      Ticket      @relation(fields: [ticketId], references: [id])
  Tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId    String?

  @@id([shiftChangeId, ticketId])
}

model ShiftChange {
  id                 String   @id @default(uuid())
  date               DateTime @default(now())
  responsibleUserId  String
  temperatureControl Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  ShiftChangeTickets        ShiftChangeTicket[]
  ResponsibleUser           User                        @relation(fields: [responsibleUserId], references: [id])
  ShiftChangeCompanies      ShiftChangeCompany[]
  ShiftChangeAssignedTicket ShiftChangeAssignedTicket[]
  ShiftChangePlannedTicket  ShiftChangePlannedTicket[]
  ShiftChangePendingTicket  ShiftChangePendingTicket[]
  Tenant                    Tenant?                     @relation(fields: [tenantId], references: [id])
  tenantId                  String?
}

model ShiftChangeCompany {
  shiftChangeId String
  companyId     String

  ShiftChange ShiftChange @relation(fields: [shiftChangeId], references: [id])
  Company     Company     @relation(fields: [companyId], references: [id])
  Tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId    String?

  @@id([shiftChangeId, companyId])
}

model ShiftChangeAssignedTicket {
  shiftChangeId String
  ticketId      String

  ShiftChange ShiftChange @relation(fields: [shiftChangeId], references: [id])
  Ticket      Ticket      @relation(fields: [ticketId], references: [id])
  Tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId    String?

  @@id([shiftChangeId, ticketId])
}

model ShiftChangePlannedTicket {
  shiftChangeId String
  ticketId      String

  ShiftChange ShiftChange @relation(fields: [shiftChangeId], references: [id])
  Ticket      Ticket      @relation(fields: [ticketId], references: [id])
  Tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId    String?

  @@id([shiftChangeId, ticketId])
}

model ShiftChangePendingTicket {
  shiftChangeId String
  ticketId      String

  ShiftChange ShiftChange @relation(fields: [shiftChangeId], references: [id])
  Ticket      Ticket      @relation(fields: [ticketId], references: [id])
  Tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  tenantId    String?

  @@id([shiftChangeId, ticketId])
}

model SuggestionComplaint {
  id          String    @id @default(uuid())
  userId      String
  companyId   String?
  description String
  category    String // 'Serviço', 'Produto', 'Atendimento', etc.
  status      String // 'new', 'pending', 'planned', 'closed'
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  resolvedAt  DateTime?
  feedback    String?

  User     User     @relation(fields: [userId], references: [id])
  Company  Company? @relation(fields: [companyId], references: [id])
  Tenant   Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId String?
}
