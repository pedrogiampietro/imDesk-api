generator client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  UserCompanies         UserCompany[]
  Tickets               TicketCompany[]
  Equipments            EquipmentCompany[]
  Locations             LocationCompany[]
  Services              Service[]
  Contracts             Contract[]
  TicketTypes           TicketTypeCompany[]
  TicketCategories      TicketCategoryCompany[]
  TicketPriorityCompany TicketPriorityCompany[]
}

model UserCompany {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id                       String    @id @default(uuid())
  username                 String    @unique
  name                     String
  email                    String    @unique
  password                 String
  phone                    String
  ramal                    String
  sector                   String
  currentLoggedCompanyId   String?
  currentLoggedCompanyName String?
  isTechnician             Boolean   @default(false)
  createdAt                DateTime? @default(now())
  updatedAt                DateTime? @default(now())
  avatarUrl                String?

  Ticket           Ticket[]
  RefreshTokens    RefreshToken[]
  Equipments       EquipmentCompany[]
  TicketResponse   TicketResponse[]
  TicketEvaluation TicketEvaluation[]
  UserCompanies    UserCompany[]
  Notification     Notification[]
}

model Ticket {
  id                      String    @id @default(uuid())
  description             String
  ticketTypeId            String
  ticketCategoryId        String
  ticketPriorityId        String
  ticketLocationId        String
  assignedTo              String[]
  equipaments             String[]
  images                  String[]
  assignedToAt            DateTime?
  closedBy                String?
  closedAt                DateTime?
  status                  String?
  timeEstimate            DateTime?
  isDelay                 Boolean?  @default(false)
  userId                  String?
  manualResolutionDueDate DateTime?
  slaViolated             Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now())
  slaDefinitionId         Int? // Campo adicionado

  ticketType       TicketType         @relation(fields: [ticketTypeId], references: [id])
  ticketCategory   TicketCategory     @relation(fields: [ticketCategoryId], references: [id])
  ticketPriority   TicketPriority     @relation(fields: [ticketPriorityId], references: [id])
  ticketLocation   Locations          @relation(fields: [ticketLocationId], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  TicketResponse   TicketResponse[]
  TicketEvaluation TicketEvaluation[]
  TicketCompanies  TicketCompany[]
  SLAViolation     SLAViolation[]
  SLADefinition    SLADefinition?     @relation(fields: [slaDefinitionId], references: [id]) // Relação adicionada
  Notification     Notification[]
}

model Equipments {
  id           String @id @default(uuid())
  name         String
  model        String
  serialNumber String
  patrimonyTag String
  type         String

  EquipmentCompanies EquipmentCompany[]
}

model Locations {
  id   String @id @default(uuid())
  name String

  LocationCompanies LocationCompany[]
  Ticket            Ticket[]
}

model TicketCompany {
  ticketId  String
  ticket    Ticket  @relation(fields: [ticketId], references: [id])
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  @@id([ticketId, companyId])
}

model EquipmentCompany {
  equipmentId String
  equipment   Equipments @relation(fields: [equipmentId], references: [id])
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?

  @@id([equipmentId, companyId])
}

model LocationCompany {
  locationId String
  location   Locations @relation(fields: [locationId], references: [id])
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id])

  @@id([locationId, companyId])
}

model TicketType {
  id                  String              @id @default(uuid())
  name                String
  Ticket              Ticket[]
  TicketTypeCompanies TicketTypeCompany[]
}

model TicketTypeCompany {
  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])

  @@id([ticketTypeId, companyId])
}

model TicketPriority {
  id     String   @id @default(uuid())
  name   String
  Ticket Ticket[]

  TicketPriorityCompanies TicketPriorityCompany[]
}

model TicketPriorityCompany {
  ticketPriorityId String
  ticketPriority   TicketPriority @relation(fields: [ticketPriorityId], references: [id])
  companyId        String
  company          Company        @relation(fields: [companyId], references: [id])

  @@id([ticketPriorityId, companyId])
}

model TicketCategory {
  id                      String                  @id @default(uuid())
  name                    String
  childrenName            String
  defaultText             String?
  Ticket                  Ticket[]
  TicketCategoryCompanies TicketCategoryCompany[]
}

model TicketCategoryCompany {
  ticketCategoryId String
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  companyId        String
  company          Company        @relation(fields: [companyId], references: [id])

  @@id([ticketCategoryId, companyId])
}

model Maintenance {
  id                     String    @id @default(uuid())
  name                   String
  location               String
  serialNumber           String
  patrimony              String
  model                  String
  preventiveCount        Int?
  correctiveCount        Int?
  nextDatePreventive     DateTime?
  previousDatePreventive DateTime?
  description            String?
  createdAt              DateTime  @default(now())
  maintenanceListTodoo   Json?

  HistoryMaintenance HistoryMaintenance[]
}

model HistoryMaintenance {
  id                   String   @id @default(uuid())
  maintenanceListTodoo Json?
  createdAt            DateTime @default(now())

  maintenanceId String
  historyId     Maintenance @relation(fields: [maintenanceId], references: [id])
}

model TicketResponse {
  id        String   @id @default(uuid())
  content   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  User      User     @relation(fields: [userId], references: [id])
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model DiskInfo {
  id        String   @id @default(uuid())
  device    String
  size      BigInt
  used      BigInt
  available BigInt
  capacity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
}

model InstalledApp {
  id              String   @id @default(uuid())
  displayName     String
  displayIcon     String?
  displayVersion  String?
  installLocation String?
  publisher       String?
  uninstallString String?
  otherDetails    Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  machineInfoId String
  machineInfo   MachineInfo @relation(fields: [machineInfoId], references: [id])
}

model MachineInfo {
  id          String   @id @default(uuid())
  hostname    String
  platform    String
  release     String
  cpu         String
  memoryTotal String
  memoryFree  String
  userInfo    String
  macAddress  String
  ipAddress   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Disks         DiskInfo[]
  InstalledApps InstalledApp[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Provider {
  id          String     @id @default(uuid())
  name        String
  phone       String
  email       String     @unique
  address     String
  status      Boolean    @default(true)
  logoURL     String?
  description String?
  category    String?
  price       Float?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())
  Contract    Contract[]
  Service     Service[]
}

model Contract {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  file       String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  Company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
}

model Service {
  id         String    @id @default(uuid())
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String
  name       String
  price      Float
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  Company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
}

model TicketEvaluation {
  id        String    @id @default(uuid())
  rating    Int       @default(0) @db.Integer
  comments  String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userId   String
  ticketId String
  User     User   @relation(fields: [userId], references: [id])
  Ticket   Ticket @relation(fields: [ticketId], references: [id])
}

model SLAViolation {
  id        String   @id @default(uuid())
  reason    String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model SLADefinition {
  id             Int      @id @default(autoincrement())
  ticketPriority String
  resolutionTime Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Tickets        Ticket[]
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  type      String // Tipo da Notificação (Ticket Pulled, Ticket Closed, etc.)
  isRead    Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id])
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
}
